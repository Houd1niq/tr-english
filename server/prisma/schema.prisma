// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  login     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(255)
  hash      String
  hashedRt  String?
  email     String?  @db.VarChar(255)
  Teacher   Teacher?
  Student   Student?

  @@map("users")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  Task      Task[]

  @@map("teachers")
}

model Student {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  User              User           @relation(fields: [userId], references: [id])
  userId            Int            @unique
  StudentTask       StudentTask[]
  KnowledgeBasePage KnowledgeBase?

  @@map("students")
}

model StudentTask {
  createdAt          DateTime @default(now())
  cardsComplete      Boolean  @default(false)
  learningComplete   Boolean  @default(false)
  learnCorrectNumber Int      @default(0)
  testComplete       Boolean  @default(false)
  testCorrectNumber  Int      @default(0)
  Student            Student  @relation(fields: [studentId], references: [id])
  studentId          Int
  Task               Task     @relation(fields: [taskId], references: [taskId])
  taskId             Int

  @@id([taskId, studentId])
  @@map("student-task")
}

model Task {
  taskId      Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  value       Json[]
  name        String        @db.VarChar(255)
  hash        String        @unique @db.VarChar(255)
  Teacher     Teacher       @relation(fields: [teacherId], references: [id])
  teacherId   Int
  StudentTask StudentTask[]

  @@map("task")
}

model KnowledgeBase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  studentId         Int                 @unique
  Student           Student             @relation(fields: [studentId], references: [id])
  KnowledgeBaseItem KnowledgeBaseItem[]
}

model KnowledgeBaseItem {
  itemId         Int    @id @default(autoincrement())
  correctCounter Int    @default(0)
  wrongCounter   Int    @default(0)
  rusWord        String
  engWord        String

  knowledgeBaseId Int
  knonwledgeBase  KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
}
